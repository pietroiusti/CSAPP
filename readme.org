* Representing and Manipulation information
** Practice problems
*** 2.1
- A. Ox39A7F8
  In binary: 0011 1001 1010 0111 1111 1000

- B. 1100 1001 0111 1011
  In hex: 0xC97B

- C. OxD5E4C
  In binary: 1101 0101 1110 0100 1100

- D. 10 0110 1110 0111 1011 0101
  In hex: 0x26E7B5

*** 2.2
Fill in the blank entries in the following table, giving the decimal
and hexadecimal representations of different powers of 2:

|  n | 2^n (decimal) | 2^n (hexadecimal) |
|----+---------------+-------------------|
|  9 |           512 |             0x200 |
|----+---------------+-------------------|
| 19 |        524288 |           0x80000 |
|----+---------------+-------------------|
| 14 |         16384 |            0x4000 |
|----+---------------+-------------------|
| 16 |         65536 |           0x10000 |
|----+---------------+-------------------|
| 17 |        131072 |           0x20000 |
|----+---------------+-------------------|
|  4 |            32 |              0x20 |
|----+---------------+-------------------|
|  7 |           128 |              0x80 |

*** 2.3
A single byte can be represented by 2 hexadecimal digits. Fill in the
missing entries in the following table, giving the decimal, binary,
and hexadecimal values of different byte patterns:

| Decimal | Binary    | Hexadecimal |
|---------+-----------+-------------|
|       0 | 0000 0000 |        0x00 |
|---------+-----------+-------------|
|     167 | 10100010  |        0xA7 |
|---------+-----------+-------------|
|      62 | 111110    |        0x3E |
|---------+-----------+-------------|
|     188 | 10111100  |        0xBC |
|---------+-----------+-------------|
|      55 | 00110111  |        0x37 |
|---------+-----------+-------------|
|     136 | 1000 1000 |        0x88 |
|---------+-----------+-------------|
|     243 | 11110011  |        0xF3 |
|---------+-----------+-------------|
|      82 | 0101 0010 |        0x52 |
|---------+-----------+-------------|
|     172 | 1010 1100 |        0xAC |
|---------+-----------+-------------|
|     231 | 1110 0111 |        0xE7 |
|---------+-----------+-------------|

*** 2.4
Without converting the numbers to decimal or binary, try to solve the
following arithmetic problems, giving the answers in
hexadecimal. Hint: Just modify the methods you use for performing
decimal addition and subtraction to use base 16.

A. 0x503c + 0x8 = 0x5044

B. 0x503c - 0x40 = 0x4ffc

C. 0x503c + 64 = 0x503c + 0x40 = 507c

D. 0x50ea - 0x503c = 0xAE

*** 2.5
Consider the following three calls to ~show_bytes~:

#+begin_src C
  int val = Ox87654321;
  byte_pointer valp = (byte_pointer) &val;
  show_bytes(valp , 1);
  show_bytes(valp , 2);
  show_bytes(valp , 3);
#+end_src

Indicate the values that will be printed by each call on a
little-endian machine and on a big-endian machine:

|   | Little endiand | Big endian |
|---+----------------+------------|
| A |             21 |         87 |
|---+----------------+------------|
| B |           2143 |       8765 |
|---+----------------+------------|
| C |         214365 |     876543 |


*** 2.7
#+begin_quote
What would be printed as a result of the following call to show_bytes?

#+begin_src C
  const char *s = "abcdef";
  show_bytes((byte_pointer) s, strlen(s));
#+end_src

#+RESULTS:

Note that letters 'a ' through 'z' have ASCII codes 0x61 through 0x7A.
#+end_quote

61 62 63 64 65 66.

*** 2.8
a: [01101001]
b: [01010101]

~a: [10010110]
~b: [10101010]

a & b: [01000001]
a | b: [01111101]
a ^ b: [00111100]

*** 2.18
A: 0x2e0 = 0000001011100000 = 736.

B: 0x58 = 0000000001011000 = 88.

C: 0x28 = 0000000000101000 = 40.

D: 0x30 = 0000000000110000 = 48.

E: 0x78 = 0000000001111000 = 120.

F: 0x88 = 0000000010001000 = 136

G: 0x1f8 = 0000000111111000 = 504.

H: 0xC0 = 0000000011000000 = 192.

I: 0x48 = 0000000001001000 = 72.

*** 2.19
* Machine-Level Representation of Programs
#+begin_src C
  long mult2(long , long);

  void multstore(long x, long y, long *dest) {
    long t = mult2(x, y);
    *dest = t;
  }
#+end_src

We can run ~gcc -Og -S mstore.c~ to generate the assembly code. The
file ~mstore.s~ with the following content is generated:

#+begin_src asm
          .file	"mstore.c"
          .text
          .globl	multstore
          .type	multstore, @function
  multstore:
          .LFB0:
          .cfi_startproc
          pushq	%rbx
          .cfi_def_cfa_offset 16
          .cfi_offset 3, -16
          movq	%rdx, %rbx
          call	mult2@PLT
          movq	%rax, (%rbx)
          popq	%rbx
          .cfi_def_cfa_offset 8
          ret
          .cfi_endproc
          .LFE0:
          .size	multstore, .-multstore
          .ident	"GCC: (GNU) 13.2.1 20230801"
          .section	.note.GNU-stack,"",@progbits
#+end_src

We can use the -c option to compile and assemble: ~gcc -Og -c
mstore.c~. Now the file ~mstore.o~ is generate too. This file is 1,368
bytes and contains the 14-byt sequence with the following hexadecimal
representation:
#+begin_src
53 48 89 d3 e8 00 00 00 00 48 89 03 5b c3
#+end_src

We can use ~objdump~ to disassemble: ~objdump -d mstore.o~. This is
the output:

#+begin_src
mstore.o:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 <multstore>:
   0:	53                   	push   %rbx
   1:	48 89 d3             	mov    %rdx,%rbx
   4:	e8 00 00 00 00       	call   9 <multstore+0x9>
   9:	48 89 03             	mov    %rax,(%rbx)
   c:	5b                   	pop    %rbx
   d:	c3                   	ret
#+end_src

The last thing to do to get the actual executable code is running a
linker. The linker must be run on the set of object-code files, one of
which must contain a ~main~ function.

Let's then create a ~main.c~ file:

#+begin_src C
  #include <stdio.h>

  void multstore(long, long, long *);

  int main() {
    long d;
    multstore(2, 3, &d);
    printf("2 * 3 --> %ld\n", d);
    return 0;
  }

  long mult2(long a, long b) {
    long s = a * b;
    return s;
  }
#+end_src

We can generate an executable named ~prog~ with: ~gcc -Og -o prog
main.c mstore.c~.

Let's also disassemble the file prog: ~objdump -d prog~...
